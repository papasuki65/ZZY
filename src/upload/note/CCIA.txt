3.1.2 防止恶性条件竞争：
    1.采取保护措施包装数据结构，确保不变量被破坏时，中间状态只对执行的线程可见。
    2.另一种做法是修改数据结构的时机及其不变量，由一连串不可拆分的改动完成数据变更，每个改动都维持不变量不被破坏。这通常被称为无锁编程，难以正确编写。如果从事这一层面的开发工作，就要探究内存模型的微妙细节，以及区分每个线程可以看到什么数据集，两者都可能很复杂。
    3.将数据结构当作事务来处理，类似于数据库在一个事务内完成更新：把需要执行的数据读写操作视为一个完整序列，先用事务日志存储记录，再把系列当成单一步骤提交运行。若别的线程改动了数据而令提交无法完整执行，则事务重新开始。这成为软件事务内存（Software Transactional Memory, STM）。

3.2.4 防止死锁的建议通常是，始终按相同顺序对两个互斥加锁。
3.2.5 防范死锁的准则
    1. 避免嵌套锁
    2. 一旦斥锁，就避免调用由用户提供的程序接口
    3. 依从固定顺序获取锁
    4. 按层级加锁
